// src/lib/supabase.ts
import { createClient, type SupabaseClient } from '@supabase/supabase-js';

/** Vite exposes only VITE_* envs */
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string | undefined;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string | undefined;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error(
    'Missing Supabase env vars. Define VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your .env (and Netlify).'
  );
}

/** Shared singleton */
export const supabase: SupabaseClient = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true, // set true if you ever use magic links / OAuth
  },
});

/* =============================================================================
   Types (adjust to your schema if needed)
   ========================================================================== */

export interface Profile {
  id: string;                // profiles.id (uuid generated by DB)
  auth_user_id: string | null; // FK to auth.users.id (nullable if you seeded before linking)
  email: string;
  name: string;
  is_admin: boolean;
  language: string | null;
  created_at?: string;       // optional if you don’t select them
  updated_at?: string;
}

/* =============================================================================
   Auth helpers
   ========================================================================== */

/**
 * Register with email/password and upsert a profile row linked via auth_user_id.
 * Returns true/false for convenience; log errors in your UI as needed.
 */
export async function register(email: string, password: string, name: string): Promise<boolean> {
  const { data: auth, error: signErr } = await supabase.auth.signUp({
    email,
    password,
    // options: { emailRedirectTo: 'https://your.app/url' } // optional
  });
  if (signErr) return false;

  const user = auth.user;
  if (!user) return false;

  // Create or update the profile record linked to this auth user
  const { error: upsertErr } = await supabase
    .from('profiles')
    .upsert(
      {
        auth_user_id: user.id,
        email,
        name,
        is_admin: false,
        language: 'en',
      },
      { onConflict: 'auth_user_id' } // requires unique index/constraint on auth_user_id
    );

  return !upsertErr;
}

/** Login with email/password */
export async function login(email: string, password: string): Promise<boolean> {
  const { error } = await supabase.auth.signInWithPassword({ email, password });
  return !error;
}

/** Logout current session */
export async function logout(): Promise<void> {
  await supabase.auth.signOut();
}

/** Convenience: fetch the currently authenticated user’s profile row */
export async function getMyProfile(): Promise<Profile | null> {
  const { data: session } = await supabase.auth.getUser();
  const user = session?.user;
  if (!user) return null;

  const { data, error } = await supabase
    .from('profiles')
    .select('*')
    .eq('auth_user_id', user.id)
    .maybeSingle<Profile>();

  if (error) return null;
  return data ?? null;
}

/* =============================================================================
   Profiles helpers you already had (kept & lightly adjusted)
   ========================================================================== */

/** Get a single profile by email. */
export async function getProfileByEmail(email: string) {
  const { data, error } = await supabase
    .from('profiles')
    .select('*')
    .eq('email', email)
    .limit(1)
    .maybeSingle<Profile>();

  return { profile: data ?? null, error };
}

/** Create a new profile row (manual use / seeding). */
export async function createProfile(
  email: string,
  name: string,
  is_admin = false,
  auth_user_id?: string
) {
  const { data, error } = await supabase
    .from('profiles')
    .insert([{ email, name, is_admin, language: 'en', auth_user_id: auth_user_id ?? null }])
    .select('*')
    .single<Profile>();

  return { profile: data ?? null, error };
}

/** Update a user’s language preference by profile id. */
export async function setUserLanguage(profileId: string, lang: string) {
  const { data, error } = await supabase
    .from('profiles')
    .update({ language: lang })
    .eq('id', profileId)
    .select('*')
    .single<Profile>();

  return { profile: data ?? null, error };
}

/** Tiny “ping” to confirm connectivity */
export async function pingSupabase() {
  return supabase.from('profiles').select('*').limit(1);
}
